plugins {
  id 'eclipse'
  id 'idea'
  id 'maven-publish'
  id 'net.minecraftforge.gradle' version '[6.0,6.2)'
  id 'org.parchmentmc.librarian.forgegradle' version '1.+'
  id 'org.spongepowered.mixin' version '0.7+'
  id 'com.github.johnrengelman.shadow' version '7.1.2'
}

jarJar.enable()

group = "com.lovetropics"
base {
  archivesName = 'LTPermissions'
}

ext.buildnumber = 0

if (System.getenv('GITHUB_RUN_NUMBER')) {
    project.buildnumber = System.getenv('GITHUB_RUN_NUMBER')
    version = "${mod_version}+${buildnumber}-gha"
} else {
    version = "${mod_version}"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
  mappings channel: 'parchment', version: parchment_version
  runs {
    configureEach {
      copyIdeResources = true
      workingDirectory project.file('run')
      property 'forge.logging.console.level', 'info'
      arg "-mixin.config=ltpermissions.mixins.json"
      jvmArg '-Dmixin.env.disableRefMap=true'
      mods {
        ltperms {
          sources sourceSets.main
        }
      }
    }
    client {
    }
    server {
    }
  }
}

repositories {
  maven { url "https://maven.tterrag.com/" }
  maven { url "https://maven.enginehub.org/repo/" }
}

dependencies {
  minecraft "net.minecraftforge:forge:$minecraft_version-$forge_version"

  jarJar(implementation(fg.deobf("com.lovetropics.lib:LTLib:$ltlib_version")))

  minecraftLibrary("com.sk89q.worldedit:worldedit-core:7.2.16-SNAPSHOT") {
    exclude group: "com.google.guava"
    exclude group: "com.google.code.gson"
    exclude group: "it.unimi.dsi"
    exclude group: "org.apache.logging.log4j"
    exclude group: "org.antlr"
  }
  implementation fg.deobf("com.sk89q.worldedit:worldedit-forge-mc1.20:7.2.16-SNAPSHOT")

//  implementation fg.deobf('com.github.hexomod:WorldEdit-CUI-FE3:1.16.5-3.0.9')

  implementation 'org.keycloak:keycloak-admin-client:24.0.2'


  if (System.getProperty("idea.sync.active") != "true") {
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
  }
}

mixin {
  add sourceSets.main, "ltpermissions.refmap.json"
}

shadowJar {
  configurations = [project.configurations.implementation]
  zip64 true
  // Ensure that the shadowJar task includes the keycloak-admin dependency
  relocate 'org.keycloak', 'shadow.org.keycloak'
}

//jar {
//  dependsOn shadowJar
//  from {
//    configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
//  }
//  // other configurations...
//  // Ensure that the jar task includes the output of the shadowJar task
//  from shadowJar.outputs.files
//}

tasks.named('jar', Jar).configure {
  archiveClassifier = 'slim'
  finalizedBy 'reobfJar'
  dependsOn shadowJar
//  dependsOn shadowJar
//  from {
//    configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
//  }

  manifest {
    attributes([
      "Specification-Title": "ltpermissions",
      "Specification-Vendor": "lovetropics",
      "Specification-Version": "1",
      "Implementation-Title": project.name,
      "Implementation-Version": archiveVersion,
      "Implementation-Vendor" :"lovetropics",
      "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
      "MixinConfigs": "ltpermissions.mixins.json"
    ])
  }

  from shadowJar.outputs.files
}

tasks.named('jarJar').configure {
  archiveClassifier = ''
  finalizedBy 'reobfJarJar'
}

reobf {
  jarJar { }
}

tasks.named('processResources', ProcessResources).configure {
  var replaceProperties = [
          mod_version: mod_version,
  ]
  inputs.properties replaceProperties

  filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
    expand replaceProperties + [project: project]
  }
}

tasks.withType(JavaCompile).configureEach {
  options.encoding = 'UTF-8'
}
