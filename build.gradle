plugins {
  id 'java-library'
  id 'eclipse'
  id 'idea'
  id 'maven-publish'
  id 'net.neoforged.moddev' version '1.0.8'
}

// jarJar.enable()

group = mod_group_id
base {
  archivesName = mod_id
}


ext.buildnumber = 0

if (System.getenv('GITHUB_RUN_NUMBER')) {
    project.buildnumber = System.getenv('GITHUB_RUN_NUMBER') as Integer
    version = "${mod_version}+${buildnumber}-gha"
} else {
    version = "${mod_version}"
}


repositories {
  maven { url "https://maven.enginehub.org/repo/" }
  maven { url "https://maven.tterrag.com/" }
  mavenLocal()
}


java.toolchain.languageVersion = JavaLanguageVersion.of(21)


dependencies {

  jarJar(implementation("com.lovetropics.lib:LTLib:$ltlib_version"))

  implementation("com.sk89q.worldedit:worldedit-core:$worldedit_version") {
    exclude group: "com.google.guava"
    exclude group: "com.google.code.gson"
    exclude group: "it.unimi.dsi"
    exclude group: "org.apache.logging.log4j"
    exclude group: "org.antlr"
  }
  
  implementation("com.sk89q.worldedit:worldedit-neoforge-mc$minecraft_version:$worldedit_version")  {
    exclude group: "com.google.guava"
  }

  if (System.getProperty("idea.sync.active") != "true") {
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
  }
}


neoForge {
  version = project.neo_version

  parchment {
    minecraftVersion = project.minecraft_version
    mappingsVersion = project.parchment_version
  }

  runs {
    configureEach {
      logLevel = org.slf4j.event.Level.INFO
      gameDirectory = project.file('run')
    }
    client {
      client()
    }
    server {
      server()
    }
    data {
      data()
      programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
  }

  mods {
    "${mod_id}" {
      sourceSet sourceSets.main
    }
  }

  neoFormRuntime {
    useEclipseCompiler = true
  }

}


sourceSets.main.resources { srcDir 'src/generated/resources' }


tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            fml_version_range      : fml_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

tasks.named('jar', Jar).configure {
  archiveClassifier = 'slim'
}


tasks.withType(JavaCompile).configureEach {
  options.encoding = 'UTF-8'
}


idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}